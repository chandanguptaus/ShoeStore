// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shoes.Persistence;

namespace Shoes.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Shoes.Domain.BrandAggregate.Brand", b =>
                {
                    b.Property<byte>("Brand_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Brand_id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Shoes.Domain.CategoryAgggregate.Category", b =>
                {
                    b.Property<byte>("Category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Category_id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Shoes.Domain.ColorAggregate.Color", b =>
                {
                    b.Property<byte>("Color_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Color_id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("Shoes.Domain.PersonAgggregate.Person", b =>
                {
                    b.Property<byte>("Person_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Person_id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Shoes.Domain.ProductAggregate.Product", b =>
                {
                    b.Property<byte>("Category_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Brand_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Person_id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("Product_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Category_id", "Brand_id", "Person_id");

                    b.HasIndex("Brand_id");

                    b.HasIndex("Person_id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Shoes.Domain.ProductAggregate.ProductPhoto", b =>
                {
                    b.Property<int>("Photo_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte?>("ProductBrand_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("ProductCategory_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("ProductPerson_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Product_id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Photo_id");

                    b.HasIndex("ProductCategory_id", "ProductBrand_id", "ProductPerson_id");

                    b.ToTable("ProductPhoto");
                });

            modelBuilder.Entity("Shoes.Domain.ProductAggregate.ProductVariant", b =>
                {
                    b.Property<int>("Product_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Color_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Size_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("Brand_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("Category_id")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Discount")
                        .HasColumnType("REAL");

                    b.Property<byte?>("Person_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("ProductBrand_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("ProductCategory_id")
                        .HasColumnType("INTEGER");

                    b.Property<byte?>("ProductPerson_id")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ProductVariant_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RetailPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Product_id", "Color_id", "Size_id");

                    b.HasIndex("Brand_id");

                    b.HasIndex("Category_id");

                    b.HasIndex("Color_id");

                    b.HasIndex("Person_id");

                    b.HasIndex("Size_id");

                    b.HasIndex("ProductCategory_id", "ProductBrand_id", "ProductPerson_id");

                    b.ToTable("ProductVariant");
                });

            modelBuilder.Entity("Shoes.Domain.SizeAggregate.Size", b =>
                {
                    b.Property<byte>("Size_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<float>("Number")
                        .HasColumnType("REAL");

                    b.HasKey("Size_id");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("Shoes.Domain.ProductAggregate.Product", b =>
                {
                    b.HasOne("Shoes.Domain.BrandAggregate.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("Brand_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoes.Domain.CategoryAgggregate.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoes.Domain.PersonAgggregate.Person", "Person")
                        .WithMany()
                        .HasForeignKey("Person_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Shoes.Domain.ProductAggregate.ProductPhoto", b =>
                {
                    b.HasOne("Shoes.Domain.ProductAggregate.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductCategory_id", "ProductBrand_id", "ProductPerson_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shoes.Domain.ProductAggregate.ProductVariant", b =>
                {
                    b.HasOne("Shoes.Domain.BrandAggregate.Brand", null)
                        .WithMany("Products")
                        .HasForeignKey("Brand_id");

                    b.HasOne("Shoes.Domain.CategoryAgggregate.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("Category_id");

                    b.HasOne("Shoes.Domain.ColorAggregate.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("Color_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoes.Domain.PersonAgggregate.Person", null)
                        .WithMany("Products")
                        .HasForeignKey("Person_id");

                    b.HasOne("Shoes.Domain.SizeAggregate.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("Size_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shoes.Domain.ProductAggregate.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductCategory_id", "ProductBrand_id", "ProductPerson_id");

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Shoes.Domain.BrandAggregate.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shoes.Domain.CategoryAgggregate.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shoes.Domain.ColorAggregate.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shoes.Domain.PersonAgggregate.Person", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shoes.Domain.ProductAggregate.Product", b =>
                {
                    b.Navigation("ProductPhotos");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Shoes.Domain.SizeAggregate.Size", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
